"""
Tools for reading and writing .gro files
"""

import sys
import numpy as np
import numpy.linalg as LA
import re
import scipy.constants as scc
import pandas as pd

def read_gro(file_name):
    """return box,natom,type_atom,coors"""
    f = open(file_name, 'r')
    lf = list(f)
    f.close()
    len1 = float(lf[-1].split()[0])
    len2 = float(lf[-1].split()[1])
    len3 = float(lf[-1].split()[2])
    box = np.diag([len1, len2, len3])
    natom = int(lf[1])
    coors = np.zeros([natom, 3])
    type_atom = []
    l = 0
    for ia in lf[2:2+natom]:
        if l < 9999:
            coors[l, :] = np.array(ia.split()[3:6:1]).astype('float')
            type_atom.append(ia.split()[1])
        else:
            coors[l, :] = np.array(ia.split()[2:5:1]).astype('float')
            tmp = ia.split()[1]
            type_atom.append(re.findall(r'(\w+?)(\d+)', tmp)[0][0])
        l += 1

    type_atom = np.array(type_atom)
    return box, natom, type_atom, coors


def write_gro(filename, box, natom, type_atom, coors):
    """Input:filename,box,natom,type_atom,coors"""
    f = open('{}.gro'.format(filename), 'w')
    f.write('SiO2\n')
    f.write('{0:5d} \n'.format(natom))
    for i in range(natom):
        if i < 9999:
            f.write('{0:5d}SIO     {1:s}{2:5d}{3:8.3f}{4:8.3f}{5:8.3f}{6:8.4f}{7:8.4f}{8:8.4f}\n'.format(i+1, type_atom[i], i+1, coors[i, 0], coors[i, 1], coors[i, 2], 0, 0, 0))
        else:
            f.write('{0:5d}SIO     {1:s}{2:6d}{3:8.3f}{4:8.3f}{5:8.3f}{6:8.4f}{7:8.4f}{8:8.4f}\n'.format(i+1, type_atom[i], i+1, coors[i, 0], coors[i, 1], coors[i, 2], 0, 0, 0))
    f.write('{0:10.5f}{1:10.5f}{2:10.5f}'.format(box[0, 0], box[1, 1], box[2, 2]))  # only work for othorgonal boxes
    f.close()


def read_gro_multi(gro_file):
    """
    read multiple frames in one gro file,
    return a list, in which each element contains box, natom, type_atom, coors
    """

    f = open(gro_file)
    lft = list(f)
    f.close()
    lt = []
    t = []
    for il in range(len(lft)):
        if 't=' in lft[il]:
            lt.append(il)
            t.append(lft[il].split()[2])

    def read_lf(lf):
        len1 = float(lf[-1].split()[0])
        len2 = float(lf[-1].split()[1])
        len3 = float(lf[-1].split()[2])
        box = np.diag([len1, len2, len3])
        natom = int(lf[1])
        coors = np.zeros([natom, 3])
        type_atom = []
        l = 0
        for ia in lf[2:2+natom]:
            if l < 9999:
                coors[l, :] = np.array(ia.split()[3:6:1]).astype('float')
                type_atom.append(ia.split()[1])
            else:
                coors[l, :] = np.array(ia.split()[2:5:1]).astype('float')
                tmp = ia.split()[1]
                type_atom.append(re.findall(r'(\w+?)(\d+)', tmp)[0][0])
            l += 1

        type_atom = np.array(type_atom)
        return box, natom, type_atom, coors

    # lf=[]
    result = []
    for it in range(len(lt)):
        if it == len(lt)-1:
            #         lf.append(lft[lt[it]:])
            result.append(read_lf(lft[lt[it]:]))
        else:
            #         lf.append(lft[lt[it]:lt[it+1]-1])
            result.append(read_lf(lft[lt[it]:lt[it+1]]))

    return result, t


def gro2pos(posfile, grofile):
    """Convert .gro to POSCAR """
    box, natom, type_atom, coors0 = read_gro('{}'.format(grofile))

    elements = list(set(type_atom))
    n_elements = len(elements)

    n_atom = []
    id_atom = []
    for i_e in range(n_elements):
        id_atom.append(np.array(np.where(type_atom == elements[i_e]))[0])
        n_atom.append(id_atom[i_e].shape[0])

    f1 = open('{}'.format(posfile), 'w')
    f1.write('generated by gro2pos\n')
    f1.write(' 1.0\n')
    for ib in range(3):
        f1.write(' {0:20.12f} {1:20.12f} {2:20.12f}\n'.format(10*box[ib, 0], 10*box[ib, 1], 10*box[ib, 2]))

    for i_e in range(n_elements):
        f1.write(' {}'.format(elements[i_e]))
    f1.write('\n')

    for i_e in range(n_elements):
        f1.write(' {0:8d}'.format(n_atom[i_e]))
    f1.write('\n')
    f1.write('C\n')
    for i_e in range(n_elements):
        for ic in range(n_atom[i_e]):
            f1.write(' {0:20.12f} {1:20.12f} {2:20.12f}\n'.format(10*coors0[id_atom[i_e][ic], 0], 10*coors0[id_atom[i_e][ic], 1], 10*coors0[id_atom[i_e][ic], 2]))

    f1.close()
